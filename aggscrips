// creates index on questions for product id
db.qs.createIndex({ product_id: 1 }, { name: 'product_id' });

// creates index on qs for question Id
db.qs.createIndex({ id: 1 }, { name: 'question_id' });

db.questions.aggregate([
    {$match: {question_id: 13}},
    {$lookup: {
    from: 'ansPhotos',
    localField: 'question_id',
    foreignField: 'question_id',
    as: 'answers'
  }}, {$unset:["asker_email","answers._id","answers.question_id","answers.answerer_email", "body"]}])


^^ this gives the entire field of questions with their answers and photos embedded




questions_answers> db.questions.aggregate([ { $match: { product_id: 13 } }, { $lookup: { from: 'ansPhotos', localField: 'question_id', foreignField: 'question_id', as: 'answers' } }, { $unset: ["asker_email", "answers._id", "answers.question_id", "answers.answerer_email", "body"] }])

^^ this gives the questions + answers for a particular product id




  {$set:{"question_body":"$body"} },
   {$unset:["asker_email","answers._id","answers.question_id","answers.answerer_email", "body"]}])



  {$unwind: {
    path: '$answers',


    db.ans.aggregate([ {$lookup: {from: "photos", localField: "id", foreignField: "answer_id", as: “photos”}}, $out: ‘ansPhotos’ ])



    /*
        mongo import  questions csv   save as  questions collection  " headerline and file type etc"
        repeat for answers csv   ==== answers
        repeat for photos csv    === photos


        db.collection.update({"name": })  multiple times  VS

        edit headerlines in csv  === for each csv edit the header to be the name I want


    SET INDEXES

        in questions set index to product_id
        in questions set index to id  === question_id  in answersPhotos
        in photos set index  to answer_id 1
        in answers set index to id  1
        in answers set index to question_id
     // set up collection ansPhotos
            // batch size  ||  allowDiskUse: true;
            //
    db.ans.aggregate([ {$lookup: {from: "photos", localField: "id", foreignField: "answer_id", as: “photos”}}, $out: ‘ansPhotos’ ])

    // drop answers and photos

    now I  have  questions  and answersPhotos presumably formatted with correct headers


    setting up routes that mirror api routes


    figure out how to store new data ---  mongoose schemas:
        -- incrementing




indexes..








===========================================================================
ANSWERS
===========================================================================

TOTAL INDEXES:   : ObjectId = AUTO    ID = ASSIGN

INDEX  ID: 1 (ascending)  AS "ID"

 I NEED an INDEX on ID in answers  as 'ID'

BECAUSE  it corresponds to the ANSWER_ID in PHOTOS

WHICH  needs to be search for efficiently in order to AGGREGATE  and export these into a new colection  => ANSPHOTOS


AFTER  I join these into a new Collection  ANSPHOTOS,

I will NEED an INDEX on ID from ANSPHOTOS

BECAUSE for   the route   put/qa/answers/:answer_id/helpful  || PUT /qa/answers/:answer_id/report

I NEED to  very quickly find  the ID  in ANSPHOTOS and mark it as helpful or report it
without doing a collection scan for the particular ID.



Options
- preserve index from transfer
- if not possible re assign index into new joined collection === not ideal
    - I would have to createIndex again for the entireity of the new collection

===========================================================================
PHOTOS
===========================================================================
TOTAL INDEX =  2: _ObjectId = AUTO     ANSWER_ID = Assign


INDEX  ANSWER_ID : 1 (ascending)  as "ANSWER_ID"


I NEED an INDEX on PHOTOS.ANSWER_ID  as "ANSWER_ID"

BECAUSE   it corresponds to the  "ID' in ANSWERS

WHICH will ned to be search for efficiently in order to join and export these tables into a new collection  ANSPHOTOS


===========================================================================
ANSPHOTOS
===========================================================================
TOTAL INDEXES: 2: _ObjectId = AUTO     QUESTION_ID = ASSIGN


INDEX: question_ID : 1  (ascending)  name: question_id

 I NEED an index in field  ANSPHOTOS.QUESTION_ID  as "QUESTION_ID"

 BECAUSE   it corresponds to QUESTIONS.ID  in the QUESTIONS Collection

 && I NEED  to search AnsPhotos  quickly

 WHEN  I get a QUESTION_ID from  the route GET /qa/questions/:QUESTION_ID/answers

&& WHEN  I search for a QUESTION_ID from the route GET /qa/questions?product_id=40346
 - this will get all the QUESTION_ID's for a particular product
    -  so if they are indexed on answers  I can very quickly access them

...

POSSIBLE
INDEX on REPORTED ?
BECAUSE  we dont return reported questions?

BUT how much will this affect query time if we already have a question ID?
 - possibly alot if there are thousands of ANSWERS  for a particular questionID

 Partial Filter option in MongoDb...


===========================================================================
QUESTIONS:
===========================================================================


TOTAL INDEXES  3 : _ObjectId  = AUTO   PRODUCT_ID = ASSIGN   QUESTION_ID = ASSIGN

INDEX:  PRODUCT_ID

I NEED an INDEX on  QUESTIONS.PRODUCT_ID  as "PRODUCT_ID"

BECAUSE  it corresponds to  a PRODUCT_ID  that will be queried

WHEN  the route GET /qa/questions?product_id=40346 is called


WHICH  will allow me to search for all  PRODUCT_ID fields in QUESTIONS quickly

WHICH  returns  all  QUESTIONS that have  a matching PRODUCT_ID

& THEN   search for all ANSWERS.QUESTION_IDs   that matches the aggregated collection of QUESTIONS


BECAUSE of the INDEX on ANSPHOTOS.QUESTION_ID



MAYBE

INDEX on QUESTIONS.ID

I NEED an INDEX on QUESTIONS.ID  as "QUESTION_ID"

BECAUSE it will be much faster  to AGGREGATE   and nest all ANSWERS

THAT have a matching QUESTION_ID

    */





PROCESS


EDIT CSV HEADERLINES FOR QUESTIONS.CSV- ANSWERS.CSV  maybe Photos.CSV


Mongo import all three to  respective collections

QUESTIONS mongoimport --type csv -d questions_answers -c questions --headerline --drop questions.csv

ANSWERS mongoimport --type csv -d questions_answers -c answers --headerline --drop answers.csv

PHOTOS mongoimport --type csv -d questions_answers -c photos --headerline --drop answers_photos.csv



Create indexes on  Answers and Photos



Answers - db.answers.createIndex({id:1})

Photos -
in mongosh
Create counters collection
db.createCollection("counters")
db.counters.insert({_id:'question_id', sequence_value:3518963})
db.counters.insert({_id:"answer_id",sequence_value:6879307})
photos id 2063759
Agg pipeline to new collection AnsPhotos
db.answers.aggregate([ {$lookup: { from:"photos", localField:"id", foreignField:"answer_id", as:"photos"}},{$out:"ansPhotos"}])

TIME TO COMPLETE ON LOCAL :  20 min 47 seconds
Drop Answers  db.answers.drop() => true


Drop Photos db.photos.drop() => true


Create indexes on AnsPhotos   db.ansPhotos.createIndex({question_id:1})

NOTE - below is a way to get stats for your collection:
db.ansPhotos.stats({scale:1024})
Create indexes on Questions  for question_id and product_id
db.questions.createIndex({question_id:1})
db.questions.createIndex({product_id:1})

Create new Schema  that fits for Questions and Answers  for storage purposes

SerVER SETUP ROUTES

AGGREGATIONS


RESEARCH:


HOW TO UPLOAD CSV WITHOUT HEADER NAMES

➜  Desktop  split -b 100000k questions.csv

edit header names in xaa file

➜  Desktop cat xa* > questions.csv



TEMPORARY VOLUME and SECURE COPY
-SCP
TRY
S3 bucket first.

Or create a volume temporarily while you hold the file , then drop the volume  ===     AWS name for virtual disk drive   , cloud term for something that serves as a storage drive.



MONGO CONVERT UNIX TO TIMESTAMP


TURN OFF LOGGING

MONGOIMPORT
- https://docs.mongodb.com/database-tools/mongoimport/
    - specifically --mode merge  Merge matching documents during import



    SHARDING  COLLECTIONS


db.questions.aggregate([{$match: {
  product_id: 1
}}, {$lookup: {
  from: 'ansPhotos',
  localField: 'question_id',
  foreignField: 'question_id',
  as: 'answers'
}}, {$unset:
["_id","answers._id","answers.photos._id","product_id","asker_email","answers.photos.id","answers.photos.answer_id"]}, {$addFields: {
    "answers.photos": {
      $map: {
        "input": "$answers.photos",
        "as": "el",
        "in": "$$el.url"
      }
    }
  }}, {$addFields: {
    answers: {
      $arrayToObject: {
        $map: {
          input: "$answers",
          in: {
            k: {
              $toString: "$$this.id"
            },
            v: "$$this"
          }
        }
      }
    }
  }}, {}])